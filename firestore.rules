rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role on the currently authenticated user
    function isAdmin() {
      // Ensure the user is authenticated before checking their claims.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users collection
    match /users/{userId} {
      // Allow user creation for any new user (e.g., during sign-up).
      allow create: if request.auth != null;
      
      // Users can read their own profile. Admins can read any profile.
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());

      // Users can update their own profile, but cannot change their isAdmin status.
      // Only an admin can change another user's isAdmin status (via a backend function).
      allow update: if request.auth != null && request.auth.uid == userId
                      && !("isAdmin" in request.resource.data);

      // Users cannot delete their own accounts directly through this rule. Deletion should be handled by a backend function.
      allow delete: if isAdmin(); // Only admins can delete user documents.

      // Cart: Users can only manage their own cart.
      match /cart/{itemId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // Goals: Users can only manage their own goals.
      match /goals/{goalId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Plants: Users can manage plants they own. Admins can read any plant.
    match /plants/{plantId} {
      allow read: if request.auth != null && (resource.data.ownerId == request.auth.uid || isAdmin());
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid || isAdmin();

      // Growth History & Disease Scans: Users can manage data for plants they own.
      match /growthHistory/{entryId} {
        allow read, write, delete: if get(/databases/$(database)/documents/plants/$(plantId)).data.ownerId == request.auth.uid || isAdmin();
      }
      match /diseaseScans/{scanId} {
        allow read, write, delete: if get(/databases/$(database)/documents/plants/$(plantId)).data.ownerId == request.auth.uid || isAdmin();
      }
    }
    
    // AI Scans: Allow authenticated users to create new scans for themselves. Admins can manage all.
    match /aiScans/{scanId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isAdmin();
    }
    
    // Marketplace: Products are publicly readable, but only writable by admins.
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // Orders: Users can create orders and read their own orders. Admins can read all orders.
    match /orders/{orderId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      allow update: if isAdmin(); // Admins can update order status
    }
    
    // Blog: Publicly readable, admin writable.
    match /blogPosts/{postId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Resources: Publicly readable, admin writable.
    match /resources/{resourceId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // Contact Messages: Anyone can create. Only admins can read/write.
    match /contactMessages/{messageId} {
      allow create: if true;
      allow read, update, delete: if isAdmin();
    }

    // Subscriptions: Users can only read their own subscription data. Admins have full access.
    match /subscriptions/{subId} {
        allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
        allow write: if isAdmin();
    }
    
    // Audit Logs: Only admins can read and write.
    match /auditLogs/{logId} {
        allow read, write: if isAdmin();
    }
  }
}
